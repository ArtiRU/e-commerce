{"version":3,"sources":["store/reducers/users/types.ts","components/CardItem.tsx","store/reducers/product/types.ts","http/api.ts","store/reducers/users/actions.ts","store/reducers/product/actions.ts","store/reducers/cart/types.ts","store/reducers/cart/actions.ts","routes/index.tsx","store/reducers/action-creators.ts","hooks/useActions.ts","hooks/useAppSelector.ts","pages/Home.tsx","pages/Login.tsx","components/CartItem.tsx","pages/Cart.tsx","pages/Product.tsx","components/AppRouter.tsx","components/NavBar.tsx","App.tsx","store/reducers/users/index.ts","store/reducers/product/index.ts","store/reducers/cart/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["UserActionEnum","CardItem","id","title","image","price","isLoading","history","useHistory","loading","className","span","hoverable","src","alt","onClick","push","routes","PRODUCT","ProductActionEnum","api","axios","create","baseURL","authActions","setIsAuth","auth","type","SET_AUTH","payload","setError","error","SET_ERROR","setIsLoading","SET_IS_LOADING","setUser","user","SET_USER","login","username","password","dispatch","a","get","response","console","log","data","find","localStorage","setItem","name","firstname","logout","removeItem","CartActionEnum","productActions","setProduct","product","SET_PRODUCT","setSelectedProduct","SET_SELECTED_PRODUCT","fetchAllProduct","fetchProduct","cartActions","setCart","SET_CART_ITEM","removeCart","REMOVE_CART_ITEM","allActionCreators","useActions","useDispatch","bindActionCreators","useTypedSelector","useSelector","Home","state","products","useEffect","map","Login","useState","setUsername","setPassword","users","notification","open","message","description","justify","align","bordered","onFinish","Item","label","value","onChange","e","target","placeholder","htmlType","CartItem","style","flexBasis","width","DeleteOutlined","Cart","cart","CloseOutlined","HOME","length","reduce","acc","cur","Product","params","useParams","selectedProduct","isAuth","antIcon","LoadingOutlined","fontSize","spin","position","top","left","transform","indicator","layout","column","xxl","xl","lg","md","sm","xs","category","CART","publicRoutes","path","component","exact","LOGIN","privateRoutes","AppRouter","route","to","NavBar","App","getItem","JSON","parse","Content","initialState","userReducer","action","productReducer","cartReducer","item","stringify","items","filteredItems","filter","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4c38600.chunk.js","sourcesContent":["export interface IUserInfo {\r\n    firstname: string,\r\n    lastname: string,\r\n}\r\n\r\nexport interface IUser {\r\n    username: string,\r\n    password: string,\r\n    name: IUserInfo,\r\n}\r\n\r\nexport interface UserState {\r\n    isAuth: boolean,\r\n    error: string,\r\n    isLoading: boolean,\r\n    user: IUser,\r\n}\r\n\r\nexport enum UserActionEnum {\r\n    SET_AUTH = 'SET_AUTH',\r\n    SET_ERROR = 'SET_ERROR',\r\n    SET_USER = 'SET_USER',\r\n    SET_IS_LOADING = 'SET_IS_LOADING',\r\n}\r\n\r\nexport interface SetAuthAction {\r\n    type: UserActionEnum.SET_AUTH,\r\n    payload: boolean,\r\n}\r\n\r\nexport interface SetErrorAction {\r\n    type: UserActionEnum.SET_ERROR,\r\n    payload: string,\r\n}\r\n\r\nexport interface SetUserAction {\r\n    type: UserActionEnum.SET_USER,\r\n    payload: IUser,\r\n}\r\n\r\nexport interface SetIsLoadingAction {\r\n    type: UserActionEnum.SET_IS_LOADING,\r\n    payload: boolean,\r\n}\r\n\r\nexport type UserAction =\r\n    SetAuthAction |\r\n    SetErrorAction |\r\n    SetUserAction |\r\n    SetIsLoadingAction;","import React, {FC} from 'react';\r\nimport {Button, Col, Row, Card} from \"antd\";\r\nimport {Skeleton} from 'antd';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {IProduct} from \"../store/reducers/product/types\";\r\nimport {routes} from \"../routes\";\r\n\r\nconst CardItem: FC<IProduct> = ({id, title, image, price, isLoading}) => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Skeleton loading={isLoading}>\r\n            <Row className=\"card-item\">\r\n                <Col span={4}>\r\n                    <Card className=\"card\" title={title} hoverable>\r\n                        <img className=\"card-image\"\r\n                            src={image}\r\n                            alt={image}\r\n                        />\r\n                        <p>Цена: {price}$</p>\r\n                        <Button className=\"card-button\"\r\n                                onClick={() => history.push(routes.PRODUCT + '/' + id)}>Перейти</Button>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Skeleton>\r\n    );\r\n};\r\n\r\nexport default CardItem;","export interface IProduct {\r\n    id: number,\r\n    title: string,\r\n    price: number,\r\n    category: string,\r\n    description: string,\r\n    image: string,\r\n    isLoading?: boolean,\r\n}\r\n\r\nexport interface ProductState {\r\n    products: IProduct[],\r\n    isLoading: boolean,\r\n    error: string,\r\n    selectedProduct: IProduct,\r\n}\r\n\r\nexport enum ProductActionEnum {\r\n    SET_IS_LOADING = 'SET_IS_LOADING',\r\n    SET_ERROR = 'SET_ERROR',\r\n    SET_PRODUCT = 'SET_PRODUCT',\r\n    SET_SELECTED_PRODUCT = 'SET_SELECTED_PRODUCT',\r\n}\r\n\r\nexport interface SetProductAction {\r\n    type: ProductActionEnum.SET_PRODUCT,\r\n    payload: IProduct[],\r\n}\r\n\r\nexport interface SetErrorAction {\r\n    type: ProductActionEnum.SET_ERROR,\r\n    payload: string,\r\n}\r\n\r\nexport interface SetIsLoadingAction {\r\n    type: ProductActionEnum.SET_IS_LOADING,\r\n    payload: boolean,\r\n}\r\n\r\nexport interface SetSelectedProductAction {\r\n    type: ProductActionEnum.SET_SELECTED_PRODUCT,\r\n    payload: IProduct,\r\n}\r\n\r\nexport type ProductAction =\r\n    SetProductAction |\r\n    SetErrorAction |\r\n    SetIsLoadingAction |\r\n    SetSelectedProductAction;\r\n\r\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = 'https://fakestoreapi.com';\r\n\r\nexport const api = axios.create({\r\n    baseURL: BASE_URL,\r\n})","import {IUser, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction, UserActionEnum} from \"./types\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport {api} from \"../../../http/api\";\r\n\r\nexport const authActions = {\r\n    setIsAuth: (auth: boolean): SetAuthAction => ({type: UserActionEnum.SET_AUTH, payload: auth}),\r\n    setError: (error: string): SetErrorAction => ({type: UserActionEnum.SET_ERROR, payload: error}),\r\n    setIsLoading: (loading: boolean): SetIsLoadingAction => ({type: UserActionEnum.SET_IS_LOADING, payload: loading}),\r\n    setUser: (user: IUser): SetUserAction => ({type: UserActionEnum.SET_USER, payload: user}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(authActions.setIsLoading(true));\r\n            const response = await api.get<IUser[]>('/users');\r\n            console.log(response.data) //\r\n            const data = await response.data.find(user => user.username === username && user.password === password);\r\n            if (data) {\r\n                localStorage.setItem('auth', 'true');\r\n                localStorage.setItem('firstname', data.name.firstname)\r\n                dispatch(authActions.setIsAuth(true));\r\n                dispatch(authActions.setUser(data));\r\n            } else {\r\n                dispatch(authActions.setError('Неправильно набран логин или пароль!'));\r\n            }\r\n            dispatch(authActions.setIsLoading(false));\r\n        } catch (e) {\r\n            dispatch(authActions.setError('Error'));\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        localStorage.removeItem('auth');\r\n        localStorage.removeItem('firstname');\r\n        dispatch(authActions.setUser({} as IUser));\r\n        dispatch(authActions.setIsAuth(false));\r\n    }\r\n}","import {\r\n    IProduct,\r\n    ProductActionEnum,\r\n    SetSelectedProductAction,\r\n    SetErrorAction,\r\n    SetIsLoadingAction,\r\n    SetProductAction\r\n} from \"./types\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport {api} from \"../../../http/api\";\r\n\r\nexport const productActions = {\r\n    setError: (error: string): SetErrorAction => ({type: ProductActionEnum.SET_ERROR, payload: error}),\r\n    setIsLoading: (loading: boolean): SetIsLoadingAction => ({\r\n        type: ProductActionEnum.SET_IS_LOADING,\r\n        payload: loading\r\n    }),\r\n    setProduct: (product: IProduct[]): SetProductAction => ({type: ProductActionEnum.SET_PRODUCT, payload: product}),\r\n    setSelectedProduct: (product: IProduct): SetSelectedProductAction => ({\r\n        type: ProductActionEnum.SET_SELECTED_PRODUCT,\r\n        payload: product\r\n    }),\r\n    fetchAllProduct: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(productActions.setIsLoading(true));\r\n            const response = await api.get<IProduct[]>('/products');\r\n            dispatch(productActions.setProduct(response.data));\r\n            dispatch(productActions.setIsLoading(false));\r\n        } catch (e) {\r\n            dispatch(productActions.setError('Попробуйте обновить страницу!'));\r\n        }\r\n    },\r\n    fetchProduct: (id: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(productActions.setIsLoading(true));\r\n            const response = await api.get<IProduct>('/products/' + id);\r\n            dispatch(productActions.setSelectedProduct(response.data));\r\n            dispatch(productActions.setIsLoading(false));\r\n        } catch (e) {\r\n            dispatch(productActions.setError('Попробуйте обновить страницу!'));\r\n        }\r\n    }\r\n\r\n}","export interface ICart {\r\n    id: number,\r\n    image: string,\r\n    title: string,\r\n    price: number,\r\n}\r\n\r\n\r\nexport interface CartState {\r\n    cart: ICart[],\r\n}\r\n\r\nexport enum CartActionEnum {\r\n    SET_CART_ITEM = 'SET_CART_ITEM',\r\n    REMOVE_CART_ITEM = 'REMOVE_CART_ITEM',\r\n}\r\n\r\nexport interface SetCartAction {\r\n    type: CartActionEnum.SET_CART_ITEM,\r\n    payload: ICart[],\r\n}\r\n\r\nexport interface RemoveCartItemAction {\r\n    type: CartActionEnum.REMOVE_CART_ITEM,\r\n    payload: number,\r\n}\r\n\r\nexport type CartAction =\r\n    SetCartAction |\r\n    RemoveCartItemAction;\r\n\r\n\r\n","import {CartActionEnum, ICart, RemoveCartItemAction, SetCartAction} from \"./types\";\r\n\r\nexport const cartActions = {\r\n    setCart: (payload: ICart[]): SetCartAction => ({type: CartActionEnum.SET_CART_ITEM, payload}),\r\n    removeCart: (id: number): RemoveCartItemAction => ({type: CartActionEnum.REMOVE_CART_ITEM, payload: id}),\r\n}","import React from 'react'\r\nimport Home from '../pages/Home'\r\nimport Login from \"../pages/Login\";\r\nimport Cart from \"../pages/Cart\";\r\nimport Product from \"../pages/Product\";\r\n\r\n\r\nexport interface IRoute {\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum routes {\r\n    LOGIN = '/login',\r\n    HOME = '/',\r\n    CART = '/cart',\r\n    PRODUCT = '/product',\r\n}\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {path: routes.HOME, component: Home, exact: true},\r\n    {path: routes.LOGIN, component: Login, exact: true},\r\n    {path: routes.PRODUCT + '/:id', component: Product, exact: true},\r\n]\r\n\r\nexport const privateRoutes: IRoute[] = [\r\n    {path: routes.HOME, component: Home, exact: true},\r\n    {path: routes.CART, component: Cart, exact: true},\r\n    {path: routes.PRODUCT + '/:id', component: Product, exact: true},\r\n]","import {authActions} from \"./users/actions\";\r\nimport {productActions} from \"./product/actions\";\r\nimport {cartActions} from './cart/actions';\r\n\r\nconst allActionCreators = {\r\n    ...authActions,\r\n    ...productActions,\r\n    ...cartActions,\r\n}\r\n\r\nexport default allActionCreators;","import {bindActionCreators} from 'redux';\r\nimport {useDispatch} from \"react-redux\";\r\nimport allActionCreators from \"../store/reducers/action-creators\";\r\n\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(allActionCreators, dispatch);\r\n}","import {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {RootState} from '../store'\r\n\r\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default useTypedSelector;","import React, {FC, useEffect} from 'react';\r\nimport CardItem from \"../components/CardItem\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport useTypedSelector from \"../hooks/useAppSelector\";\r\n\r\nconst Home: FC = () => {\r\n    const {fetchAllProduct} = useActions();\r\n    const {products, isLoading} = useTypedSelector(state => state.products);\r\n\r\n    useEffect(() => {\r\n        fetchAllProduct();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"card-wrapper\">\r\n            {\r\n                products.map(product => <CardItem key={product.id} {...product} isLoading={isLoading}/>)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Form, Input, Row, Card, notification} from \"antd\";\r\nimport useTypedSelector from \"../hooks/useAppSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst Login: FC = () => {\r\n    const {login, setError} = useActions();\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const {isLoading, error} = useTypedSelector(state => state.users);\r\n\r\n    const submit = () => {\r\n        login(username, password);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            notification.open({\r\n                message: 'Ошибка входа',\r\n                description: error\r\n            })\r\n        }\r\n        setError('');\r\n    }, [error])\r\n\r\n    return (\r\n        <Row className=\"wrapper\" justify=\"center\" align=\"middle\">\r\n            <Card className=\"card-width\" title=\"Вход\" bordered={false}>\r\n                <Form onFinish={submit}>\r\n                    <Form.Item label=\"Введите логин\">\r\n                        <Input value={username} onChange={(e) => setUsername(e.target.value)} name=\"username\"\r\n                               placeholder=\"login\"/>\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Введите пароль\">\r\n                        <Input value={password} onChange={(e) => setPassword(e.target.value)} name=\"password\"\r\n                               placeholder=\"qwerty123\"/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>Вход</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, {FC} from 'react';\r\nimport { Row} from \"antd\";\r\nimport {DeleteOutlined} from '@ant-design/icons';\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\ninterface CartProductProps {\r\n    id: number,\r\n    image: string,\r\n    title: string,\r\n    price: number,\r\n}\r\n\r\nconst CartItem: FC<CartProductProps> = ({id,image, title, price}) => {\r\n    const {removeCart} = useActions();\r\n    return (\r\n        <div className=\"cart-content\">\r\n            <Row style={{flexBasis: \"55%\"}}>\r\n                <img\r\n                    className=\"cart-img\"\r\n                    src={image}\r\n                    alt={image}\r\n                    width={60}/>\r\n                <div className=\"cart-text\">{title}, <span className=\"cart-price\">{price}$</span></div>\r\n            </Row>\r\n            <Row>\r\n                <DeleteOutlined className=\"close-icon cart-cancel\" onClick={() => removeCart(id)}/>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartItem;","import {Button} from 'antd';\r\nimport React, {FC} from 'react';\r\nimport {CloseOutlined} from '@ant-design/icons';\r\nimport CartItem from \"../components/CartItem\";\r\nimport useTypedSelector from \"../hooks/useAppSelector\";\r\nimport {routes} from '../routes';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst Cart: FC = () => {\r\n    const history = useHistory();\r\n    const {cart} = useTypedSelector(state => state.cart);\r\n\r\n    return (\r\n        <div className=\"cart\">\r\n            <div className=\"cart-header\">\r\n                <div className=\"cart-title\">Корзина</div>\r\n                <CloseOutlined className=\"close-icon\" onClick={() => history.push(routes.HOME)}/>\r\n            </div>\r\n            <div className=\"cart-body\">\r\n                {\r\n                    !cart.length ? <div>Корзина пуста</div> : cart.map(product => <CartItem\r\n                        key={product.id} {...product}/>)\r\n                }\r\n            </div>\r\n            <div className=\"cart-footer\">\r\n                <div className=\"total\">\r\n                    <b>Всего: {cart.reduce((acc,cur) => {\r\n                        return acc + cur.price\r\n                    },0)}$</b>\r\n                </div>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;","import React, {FC, useEffect} from 'react';\r\nimport {Button, Col, Descriptions, notification, Row, Spin} from 'antd';\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport useTypedSelector from \"../hooks/useAppSelector\";\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\nimport {routes} from \"../routes\";\r\n\r\ninterface IRouteParams {\r\n    id: string,\r\n}\r\n\r\nconst Product: FC = () => {\r\n    const params = useParams<IRouteParams>();\r\n    const history = useHistory();\r\n    const {fetchProduct, setError, setCart} = useActions()\r\n    const {selectedProduct, isLoading, error} = useTypedSelector(state => state.products);\r\n    const {isAuth} = useTypedSelector(state => state.users);\r\n\r\n    const antIcon = <LoadingOutlined style={{fontSize: 234}} spin/>;\r\n\r\n    const addToCart = () => {\r\n        if(isAuth) {\r\n            setCart([{...selectedProduct}]);\r\n            history.push(routes.CART);\r\n        } else {\r\n            notification.open({\r\n                message: 'Пройдите регистрацию',\r\n                description: 'Чтобы добавить в корзину нужно зарегистриоваться'\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProduct(params.id);\r\n\r\n        if (error) {\r\n            notification.open({\r\n                message: 'Ошибка страницы',\r\n                description: error\r\n            })\r\n        }\r\n        setError('');\r\n    }, [error]);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading ?\r\n                    <div style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate: (-50%,-50%)'}}>\r\n                        <Spin indicator={antIcon}/>\r\n                    </div>\r\n                    :\r\n                    <Row className=\"flex-container\">\r\n                        <Col span={4}>\r\n                            <img className=\"card-image\" src={selectedProduct.image} alt={selectedProduct.image}/>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Descriptions title={selectedProduct.title} bordered layout=\"vertical\"\r\n                                          column={{xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1}}>\r\n                                <Descriptions.Item label=\"Категория\">{selectedProduct.category}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Цена,$\">{selectedProduct.price}</Descriptions.Item>\r\n                                <Descriptions.Item\r\n                                    label=\"Описание товара\">{selectedProduct.description}</Descriptions.Item>\r\n                            </Descriptions>\r\n                        </Col>\r\n                    </Row>\r\n            }\r\n            <Row>\r\n                <Button onClick={addToCart}>Добавить в корзину</Button>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Product;","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport {privateRoutes, publicRoutes, routes} from '../routes';\r\nimport useTypedSelector from \"../hooks/useAppSelector\";\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useTypedSelector(state => state.users);\r\n    return (\r\n        <Switch>\r\n            {\r\n                isAuth ?\r\n                    privateRoutes.map(route => <Route path={route.path} component={route.component}\r\n                                                      exact={route.exact} key={route.path}/>)\r\n                    :\r\n                    publicRoutes.map(route => <Route path={route.path} component={route.component}\r\n                                                     exact={route.exact} key={route.path}/>)\r\n            }\r\n            <Redirect to={routes.HOME}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, {FC} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {routes} from \"../routes\";\r\nimport useTypedSelector from '../hooks/useAppSelector';\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\n\r\nconst NavBar: FC = () => {\r\n    const {logout} = useActions()\r\n    const {isAuth, user} = useTypedSelector(state => state.users);\r\n    const history = useHistory();\r\n\r\n    const handleLogin = () => {\r\n        if (isAuth) {\r\n            logout();\r\n            history.push(routes.HOME);\r\n        } else {\r\n            history.push(routes.LOGIN)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav className=\"nav\">\r\n                <div onClick={() => history.push(routes.HOME)}>На главную</div>\r\n                <ul className=\"list\">\r\n                    {isAuth && <div className=\"username\">{user.name?.firstname}</div>}\r\n                    <li onClick={handleLogin}>{isAuth ? 'Выйти' : 'Войти'}</li>\r\n                    <li onClick={() => history.push(routes.CART)}>Корзина</li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React, {FC, useEffect} from 'react';\nimport './styles/index.css';\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport {Layout} from \"antd\";\nimport {useActions} from \"./hooks/useActions\";\nimport {IUser} from \"./store/reducers/users/types\";\nimport {ICart} from \"./store/reducers/cart/types\";\n\nconst App: FC = () => {\n    const {setIsAuth, setUser, setCart} = useActions();\n\n    useEffect(() => {\n        if (localStorage.getItem('auth')) {\n            setUser({name: {firstname: localStorage.getItem('firstname' || '')}} as IUser);\n            setIsAuth(true);\n            setCart(JSON.parse(localStorage.getItem('cart') as string) || []);\n        }\n    }, [setIsAuth, setUser])\n\n    return (\n        <>\n            <Layout className=\"layout\">\n                <NavBar/>\n                <Layout.Content className=\"content\">\n                    <div className=\"site-layout-content\">\n                        <AppRouter/>\n                    </div>\n                </Layout.Content>\n            </Layout>\n        </>\n    );\n}\n\nexport default App;\n","import {UserAction, UserActionEnum, UserState, IUser} from \"./types\";\r\n\r\nconst initialState: UserState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser,\r\n}\r\n\r\nconst userReducer = (state= initialState, action: UserAction): UserState => {\r\n    switch (action.type) {\r\n        case UserActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case UserActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case UserActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case UserActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","import {IProduct, ProductAction, ProductActionEnum, ProductState} from \"./types\";\r\n\r\nconst initialState: ProductState = {\r\n    products: [],\r\n    isLoading: false,\r\n    error: '',\r\n    selectedProduct: {} as IProduct\r\n};\r\nconst productReducer = (state = initialState, action: ProductAction): ProductState => {\r\n    switch (action.type) {\r\n        case ProductActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        case ProductActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case ProductActionEnum.SET_PRODUCT:\r\n            return {...state, products: action.payload}\r\n        case ProductActionEnum.SET_SELECTED_PRODUCT:\r\n            return {...state, selectedProduct: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default productReducer;","import {CartAction, CartActionEnum, CartState} from \"./types\";\r\n\r\n\r\nconst initialState: CartState = {\r\n    cart: []\r\n}\r\n\r\nconst cartReducer = (state = initialState, action: CartAction): CartState => {\r\n    switch (action.type) {\r\n        case CartActionEnum.SET_CART_ITEM: {\r\n            const item = state.cart.find(item => item.title === action.payload[0].title);\r\n            if(item) {\r\n                return state;\r\n            }\r\n            localStorage.setItem('cart', JSON.stringify([...state.cart, ...action.payload]));\r\n            return {...state, cart: [...state.cart, ...action.payload]};\r\n        }\r\n        case CartActionEnum.REMOVE_CART_ITEM: {\r\n            const items = JSON.parse(localStorage.getItem('cart') as string) || [];\r\n            const filteredItems = items.filter((item: any) => item.id !== action.payload);\r\n            localStorage.setItem('cart', JSON.stringify(filteredItems));\r\n            return {...state, cart: filteredItems};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default cartReducer;","import {combineReducers} from 'redux'\r\nimport users from './users';\r\nimport products from './product';\r\nimport cart from './cart'\r\n\r\nconst rootReducer = combineReducers({\r\n    users,\r\n    products,\r\n    cart\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nimport \"normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <BrowserRouter>\n              <App />\n          </BrowserRouter>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}